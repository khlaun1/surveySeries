//Single place to own layout
//header placement, sidebar behavior, z-index stack, scroll containers
//height math and skip to content.
//aria-controls, focus management for drawers/menus, landmark roles. 

//responsibilities of appshell: 
   //structural grid => header row + content row; sidebar column + main column
   //responsive drawer orchestration: 
   //open/close state, breakpoint switching, focus trap when open.
   //skip link and landmark roles; 
   //scrollable main => make the right thing scroll and not the entire page. 
   //header above drawer above content; no overlaps. 
   //optional gutters and max width handling for content.
   //portal anchors for toasts/modals if needed. or leave to layout.

//No data fetching, no business logic, no page specific tool-bars, no gloabl-theme



//I need a box from MUI for layout primitives. 
//Sidebar drawer, mediaQuery hoook and useTheme from MUI for breakpoints. 
//React state hook.
//accessibility ids which is useId.


//what props should this thing take? So that this thing is reusable.
//It's a shell so, it needs slots: 
//header, sidebar, children.
//may need some layout knobs sidebar width, content max-width etc.

//What's the outer layout strategy? 
//Flex or Grid? Where does the height and scroll live? 


State management
//How do we handle different screen sizes appropriately? 
//using useTheme we introduce breakpoint. Which basically sets a threshold and if that is reached the number of columns will break.
//We use useMediaQuery to respond to this breaking. We check if the screen of the browser is > or < lg. 
//useMediaQuery will return a boolean value based on which we will identify whether we are on a desktop or a mobile screen.


Accessibility
//How do we make this available to screen readers? 
//using useId which will generate a random stable unique ID for component instance. We do this instead of hardcoding the ID. 
//This is useful when using framework which use server side render. It helps so that the website does not break
//when comparing server side and client side render. If using something like math.random().
//The ids would be different. 