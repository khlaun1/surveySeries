//Single place to own layout
//header placement, sidebar behavior, z-index stack, scroll containers
//height math and skip to content.
//aria-controls, focus management for drawers/menus, landmark roles. 

//responsibilities of appshell: 
   //structural grid => header row + content row; sidebar column + main column
   //responsive drawer orchestration: 
   //open/close state, breakpoint switching, focus trap when open.
   //skip link and landmark roles; 
   //scrollable main => make the right thing scroll and not the entire page. 
   //header above drawer above content; no overlaps. 
   //optional gutters and max width handling for content.
   //portal anchors for toasts/modals if needed. or leave to layout.

//No data fetching, no business logic, no page specific tool-bars, no gloabl-theme



//I need a box from MUI for layout primitives. 
//Sidebar drawer, mediaQuery hoook and useTheme from MUI for breakpoints. 
//React state hook.
//accessibility ids which is useId.


//what props should this thing take? So that this thing is reusable.
//It's a shell so, it needs slots: 
//header, sidebar, children.
//may need some layout knobs sidebar width, content max-width etc.

//What's the outer layout strategy? 
//Flex or Grid? Where does the height and scroll live? 


State management
//How do we handle different screen sizes appropriately? 
//using useTheme we introduce breakpoint. Which basically sets a threshold and if that is reached the number of columns will break.
//We use useMediaQuery to respond to this breaking. We check if the screen of the browser is > or < lg. 
//useMediaQuery will return a boolean value based on which we will identify whether we are on a desktop or a mobile screen.


Accessibility
//How do we make this available to screen readers? 
//using useId which will generate a random stable unique ID for component instance. We do this instead of hardcoding the ID. 
//This is useful when using framework which use server side render. It helps so that the website does not break
//when comparing server side and client side render. If using something like math.random().
//The ids would be different. 

//How do we coordinate state changes between internal state and parent component? 
//How do we update internal state? 
//How do we notify parent of the state change? 

//Now comes jumping past the header/sidebar to the main content when the user is navigating using the keyboard.
//adding skip link which targets "main-content"

//How do we create a proper link that screen readers recognize? 
//using semantic <a> tag not <div> with click handlers. 

//How do we remove it from the document flow? 
//how do we hide it without using display:none? 

//when should this become visible?
//only when keyboard user tabs to it. for this we use &:focus

//where should it appear on the screen. 

//how do we ensure it appears above everything? 
//use MUI's z-index system at tooltip level. 

//What background color should it have? 
//use theme's paper color(adapts to light/dark mode automatically).

//How much padding for comfortable clicking/reading? 
//MUI spacing unit 1(typically 8px).

//How do we make it look elevated and important? 
//subtle shadow suggests it's a floating element. 

//How do we make it feel modern and polished? 
//slight rounding matches modern design patterns.

How do we mount the header without breaking z-index? 
where does the header live and how is it stacked? 
how do we create a proper header that stays visible during scroll? 
what's the most semantic way to mark up a site header? 
in a sticky header region with the header component provided by the caller.


//how does the sidebar switch between permanent and temporary? 
//desktop gets the permanent nav view, mobile uses a modal drawer.


How do we create a flexible conteinaer that adapts between desktop(sidebar + main) and mobile (main only) layouts? 
//how do we control both sidebar and main areas precisely? 
//using display type grid would be helpful with this. 
//How do we conditionally show sidebar? 
//how do we provide flexible header content while giving access to sidebar controls?

//What is the correct element for navigation? 
//how do we ensure accessibility



